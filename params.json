{"body":"Google Search Result Parser\r\n---------------\r\n\r\nThis application sends a request to Google search engine pretending to be a browser and parses the returned HTML for search results. The key points of the application are\r\n\r\n**Sending a request using WebClient**\r\n\r\n    public static string GetSearchResultHtlm(string keywords)\r\n    {\r\n    \tStringBuilder sb = new StringBuilder(\"http://www.google.com/search?q=\");\r\n    \tsb.Append(keywords);\r\n    \treturn webClient.DownloadString(sb.ToString());\r\n    }\r\n\r\n**Parsing the HTML returned by WebClient**\r\n\r\n    public static List<String> ParseSearchResultHtml(string html)\r\n    {\r\n        Regex extractUrl = new Regex(@\"[&?](?:q|url)=([^&]+)\", RegexOptions.Compiled);\r\n    \tList<String> searchResults = new List<string>();\r\n\r\n    \tvar doc = new HtmlAgilityPack.HtmlDocument();\r\n    \tdoc.LoadHtml(html);\r\n\r\n    \tvar nodes = (from node in doc.DocumentNode.SelectNodes(\"//a\")\r\n\t\t\t\t let href = node.Attributes[\"href\"]\r\n\t\t\t\t where null != href\r\n\t\t\t\t where href.Value.Contains(\"/url?\") || href.Value.Contains(\"?url=\")\r\n\t\t\t\t select href.Value).ToList();\r\n\r\n    \tforeach (var node in nodes)\r\n    \t{\r\n    \t\tvar match = extractUrl.Match(node);\r\n    \t\tstring test = HttpUtility.UrlDecode(match.Groups[1].Value);\r\n    \t\tsearchResults.Add(test);\r\n    \t}\r\n     \r\n    \treturn searchResults;\r\n    }\r\n\r\n**See also my blog entries on the subject: [Part I] and [Part II]**\r\n\r\n  [Part I]: http://justmycode.blogspot.com.au/2012/09/playing-with-google-search-results.html\r\n  [Part II]: http://justmycode.blogspot.com.au/2012/09/playing-with-google-search-results-2.html\r\n","name":"Googlesearch","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Using WebClient to send search request to Google and parse results","google":""}